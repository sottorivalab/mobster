library(dbpmm)
library(dbpmm)
library(dbpmm)
library(dbpmm)
project_VAF_belowValue_each_sample = function(x, VAF.columns, NV.columns, VAF.lower = 0.05)
{
# Subset the data and keep only SNVs that are either not-called in a sample or that, if
# called, they have VAF above cutoff
suitable = apply(
x[, VAF.columns], 1,
function(y) {
xg0 = y > 0
xgc = y >= VAF.lower
if (all(!xg0)) return(FALSE)
else return(all(xgc[xg0]))
}
)
rejected = x[!suitable, ]
accepted = x[suitable, ]
# In each entry that is unsutable, we fix it projecting to 0 entries below the cutoff
# but we keep the coverage information available
new.VAF = rejected[, VAF.columns]
idx = apply(new.VAF, c(1,2), function(w) w < VAF.lower)
new.VAF[idx] = 0
new.NV = rejected[, NV.columns]
new.NV[idx] = 0
new.entries = cbind(new.VAF, new.NV)
new.entries = cbind(new.entries, rejected[, DP.columns])
new.x = rbind(accepted, new.entries[, colnames(accepted)])
pio::pioTit(paste0("SNVs that when called are in the VAF above ", VAF.lower, " - n = ", nrow(new.x)))
print(tibble::as.tibble(new.x))
list(data = new.x, rejected = rejected)
}
# Subset the data and keep only SNVs that are either not-called in a sample or that, if
# called, they have VAF above cutoff
suitable = sapply(
seq(VAF.columns),
function(y) {
v = x[, VAF.columns[y]]
xg0 = v > 0
xgc = v >= VAF.lower[y]
if (all(!xg0)) return(FALSE)
else return(all(xgc[xg0]))
}
)
library(dbpmm)
library(dbpmm)
library(dbpmm)
library(dbpmm)
x_nk = matrix(runif(100))
z_nk = matrix(runif(100))
z_nk
z_nk = matrix(runif(100), ncol = 3)
z_nk = matrix(runif(333), ncol = 3)
z_nk
x = -sum(z_nk * log(z_nk), na.rm = TRUE)
x
z_nk * log(z_nk)
zznk = cbind(z_nk,  0)
zznk
x = -sum(z_nk * log(z_nk), na.rm = TRUE)
y = -sum(zz_nk * log(zz_nk), na.rm = TRUE)
zz_nk = cbind(z_nk,  0)
y = -sum(zz_nk * log(zz_nk), na.rm = TRUE)
y
x
zz_nk * log(zz_nk)
zz_nk = cbind(z_nk,  -0.00000001)
y = -sum(zz_nk * log(zz_nk), na.rm = TRUE)
y
library(dbpmm)
library(dbpmm)
library(dbpmm)
library(dbpmm)
library(dbpmm)
library(dbpmm)
library(dbpmm)
library(dbpmm)
library(dbpmm)
library(dbpmm)
devtools::document()
library(dbpmm)
library(dbpmm)
library(dbpmm)
library(dbpmm)
library(dbpmm)
prod(c(1,2,2), c(3,2,2))
prod(c(2,2), c(2,2))
sessionInfo()
library(dbpmm)
library(dbpmm)
library(dbpmm)
library(dbpmm)
library(dbpmm)
library(dbpmm)
library(dbpmm)
library(dbpmm)
pio::pioHdr("MOBSTER", "Plotting grid with")
pio::pioHdr("MOBSTER ss", "Plotting grid with")
pio::pioHdr("MOBSTER Grid plot for multivariate", "Plotting grid with")
pio::pioHdr
pio::pioHdr("MOBSTER - Multivariate grid plot",
c(`Bottom block` = below.cluster,
`Top block` = top.cluster,
`Diagonal` = diagonal
)
)
library(dbpmm)
library(dbpmm)
library(dbpmm)
library(dbpmm)
library(dbpmm)
library(dbpmm)
library(dbpmm)
library(dbpmm)
library(dbpmm)
library(dbpmm)
library(dbpmm)
devtools::document()
devtools::document()
library(dbpmm)
devtools::document()
devtools::document()
library(dbpmm)
devtools::document()
devtools::document()
library(dbpmm)
library(dbpmm)
library(dbpmm)
library(dbpmm)
VAF.cluster1
library(dbpmm)
library(dbpmm)
library(dbpmm)
library(dbpmm)
devtools::document()
library(dbpmm)
library(dbpmm)
col = scols(1:maxBeta, palette = palette)
library(dbpmm)
library(dbpmm)
library(dbpmm)
library(dbpmm)
library(dbpmm)
show_VAF_per_segment =  function(segments, muts, cutoff,
lbl.ch.chromosome = 'chr',
lbl.ch.from = 'from',
lbl.ch.to = 'to',
lbl.mu.chromosome = 'chr',
lbl.mu.pos = 'pos',
lbl.mu.to = 'to'
)
{
map_SNV_2_CNA_segment = function(segments, muts, cutoff, s)
{
stopifnot(
all(
c(lbl.ch.chromosome,
lbl.ch.from,
lbl.ch.to
) %in% colnames(segments)
))
stopifnot(
all(
c(lbl.mu.chromosome,
lbl.mu.pos
) %in% colnames(mut)
))
map = NULL
map = muts[muts[, lbl.mu.chromosome] == segments[s, lbl.chromosome], ]
map = map[map[, lbl.mu.pos] >= segments[s, lbl.ch.from], ]
map = map[map[, lbl.mu.pos] <= segments[s, to], ]
map = map[, startsWith(colnames(map), 'VAF')]
map = reshape2::melt(map)
head(map)
map = map[map$value > cutoff, ]
mxlim = max(1, max(map$value, na.rm = T))
ggplot(map, aes(value, fill = variable))+
geom_histogram(binwidth = 0.01) +
facet_wrap(~variable, scale = 'free', nrow = 1) +
coord_cartesian(xlim = c(0, mxlim)) +
guides(fill = FALSE) +
labs(title = paste(segments$chr[s], ':', segments$first.locus[s], '-', segments$last.locus[s]))
}
plots = lapply(1:nrow(segments), map_snv_chromo,
segments = segments,
muts = muts,
cutoff = cutoff)
figure = ggpubr::ggarrange(
plotlist = plots,
nrow = nrow(segments),
ncol = 1
)
figure
}
map_SNV_2_CNA_segment = function(segments,
segment.id,
muts,
labels = list(
Chromosome = c(`chromosome` = 'chr', `from` = 'from', `to` = 'to'),
Mutations = c(`chromosome` = 'chr', `position` = 'pos')
),
lbl.ch.chromosome = 'chr',
lbl.ch.from = 'from',
lbl.ch.to = 'to',
lbl.mu.chromosome = 'chr',
lbl.mu.pos = 'pos',
lbl.mu.to = 'to')
{
stopifnot(
all(
c(lbl.ch.chromosome,
lbl.ch.from,
lbl.ch.to
) %in% colnames(segments)
))
stopifnot(
all(
c(lbl.mu.chromosome,
lbl.mu.pos
) %in% colnames(mut)
))
map = NULL
map = muts[muts[, lbl.mu.chromosome] == segments[s, lbl.chromosome], ]
map = map[map[, lbl.mu.pos] >= segments[s, lbl.ch.from], ]
map = map[map[, lbl.mu.pos] <= segments[s, to], ]
map = map[, startsWith(colnames(map), 'VAF')]
map = reshape2::melt(map)
head(map)
map = map[map$value > cutoff, ]
mxlim = max(1, max(map$value, na.rm = T))
ggplot(map, aes(value, fill = variable))+
geom_histogram(binwidth = 0.01) +
facet_wrap(~variable, scale = 'free', nrow = 1) +
coord_cartesian(xlim = c(0, mxlim)) +
guides(fill = FALSE) +
labs(title = paste(segments$chr[s], ':', segments$first.locus[s], '-', segments$last.locus[s]))
}
list(
Chromosome = c(`chromosome` = 'chr', `from` = 'from', `to` = 'to'),
Mutations = c(`chromosome` = 'chr', `position` = 'pos')
)
labels = list(
Chromosome = c(`chromosome` = 'chr', `from` = 'from', `to` = 'to'),
Mutations = c(`chromosome` = 'chr', `position` = 'pos')
)
labels$Chromosome['chromosome']
library(dbpmm)
library(dbpmm)
library(dbpmm)
library(dbpmm)
library(dbpmm)
library(dbpmm)
library(dbpmm)
library(dbpmm)
library(dbpmm)
library(dbpmm)
library(dbpmm)
library(dbpmm)
as_ggplot
??as_ggplot
library(dbpmm)
library(dbpmm)
library(dbpmm)
obj = mobster_dataset(filtered$data, samples = paste0('Set6_', c(42, 44, 45, 46, 47, 48)))
require(mobster)
obj = mobster_dataset(filtered$data, samples = paste0('Set6_', c(42, 44, 45, 46, 47, 48)))
require(mobster)
obj = mobster_dataset(filtered$data, samples = paste0('Set6_', c(42, 44, 45, 46, 47, 48)))
load("~/Documents/GitHub/test.dbpmm/Multi-region Tests/MSeq2.0/Set06/SNVs_Purity_Adjusted_diploid.RData")
load("~/Documents/GitHub/test.dbpmm/Multi-region Tests/MSeq2.0/Set06/SNVs_Above_5Percent_Purity_Adjusted_diploid.RData")
require(mobster)
obj = mobster_dataset(filtered$data, samples = paste0('Set6_', c(42, 44, 45, 46, 47, 48)))
obj
obj
require(mobster)
obj = mobster_dataset(filtered$data, samples = paste0('Set6_', c(42, 44, 45, 46, 47, 48)))
obj
setwd("~/Documents/GitHub/test.dbpmm/Multi-region Tests/MSeq2.0/Set06")
setwd("~/Documents/GitHub/test.dbpmm/Multi-region Tests/MSeq2.0")
require(mobster)
obj = mobster_dataset(filtered$data, samples = paste0('Set6_', c(42, 44, 45, 46, 47, 48)))
obj
source('0.Parameters_Set06.R')
require(mobster)
##################### Prepare mutation data, filter normal and SNVs
muts = read.csv('data/Set.06.WGS.snv.somatic.annoVar.comp.txt',
stringsAsFactors = FALSE, header = TRUE, sep = '\t')
head(muts)
nrow(muts)
head(muts)
samples = paste0('Set6_', c(42, 44, 45, 46, 47, 48))
obj = mobster_dataset(
filtered$data,
samples = samples,
description = 'MSeq2.0_Set06'
DP.columns = paste0(samples, ".DP"),
NV.columns = paste0(samples, ".NV"),
VAF.columns = paste0(samples, ".VAF"),
subsample = 2000
)
obj = mobster_dataset(
filtered$data,
samples = samples,
description = 'MSeq2.0_Set06',
DP.columns = paste0(samples, ".DP"),
NV.columns = paste0(samples, ".NV"),
VAF.columns = paste0(samples, ".VAF"),
subsample = 2000
)
paste0(samples, ".DP")
head(muts)
obj = mobster_dataset(
filtered$data,
samples = samples,
description = 'MSeq2.0_Set06',
DP.columns = paste0(samples, ".NR"),
NV.columns = paste0(samples, ".NV"),
VAF.columns = paste0(samples, ".VAF"),
subsample = 2000
)
obj
obj = mobster_dataset(
muts,
samples = samples,
description = 'MSeq2.0_Set06',
DP.columns = paste0(samples, ".NR"),
NV.columns = paste0(samples, ".NV"),
VAF.columns = paste0(samples, ".VAF"),
subsample = 2000
)
obj
obj
# Filter for normal and SNVs status
muts = muts[muts$VAF.Set6_54_N == NORMAL_MIN_VAF, ]
muts = muts[muts$mutationtype == 'snv', ]
obj = mobster_dataset(
muts,
samples = samples,
description = 'MSeq2.0_Set06',
DP.columns = paste0(samples, ".NR"),
NV.columns = paste0(samples, ".NV"),
VAF.columns = paste0(samples, ".VAF"),
subsample = 2000
)
muts
##################### Prepare mutation data, filter normal and SNVs
muts = read.csv('data/Set.06.WGS.snv.somatic.annoVar.comp.txt',
stringsAsFactors = FALSE, header = TRUE, sep = '\t')
head(muts)
samples = paste0('Set6_', c(42, 44, 45, 46, 47, 48))
NORMAL_MIN_VAF
# Filter for normal and SNVs status
muts = muts[muts$Set6_54_N.VAF == NORMAL_MIN_VAF, ]
muts = muts[muts$mutationtype == 'snv', ]
head(muts)
obj = mobster_dataset(
muts,
samples = samples,
description = 'MSeq2.0_Set06',
DP.columns = paste0(samples, ".NR"),
NV.columns = paste0(samples, ".NV"),
VAF.columns = paste0(samples, ".VAF"),
subsample = 2000
)
obj
obj$data
obj
save(obj, file = "Set06/1.SNVs_raw_all.RData")
##################### Add CNA calls to get real diploid mutations
# Define diploid segments
# cnMajor = 1
# cnminor = 1
# across all samples,
segments = read.csv('data/Set.06.penalty0.95.baf.gt.txt',
stringsAsFactors = FALSE, header = TRUE, sep = '\t')
head(segments)
segments$chr = paste0('chr', segments$chr)
segments = segments[apply(segments[, 5:ncol(segments)], 1, function(x) all(x == 1)), ]
nrow(segments)
# dbpmm:::map_SNV_2_CNA_segment makes a simple mapping of SNVs to segments
my.labels = list(
Chromosome = c(`chromosome` = 'chr', `from` = 'first.locus', `to` = 'last.locus'),
Mutations = c(`chromosome` = 'chr', `position` = 'start')
)
diploid = lapply(
1:nrow(segments),
dbpmm:::map_SNV_2_CNA_segment,
segments = segments,
muts = muts,
labels = my.labels)
diploid
# Require > 500 SNVs per segment to be considered
lapply(diploid, nrow)
used.segments = sapply(diploid, function(x) nrow(x) > 500)
diploid = diploid[used.segments]
segments = segments[used.segments, ]
segments
segments = read.csv('data/Set.06.penalty0.95.baf.gt.txt',
stringsAsFactors = FALSE, header = TRUE, sep = '\t')
head(segments)
colnames(segments)[1:4] = c('chr', 'from', 'to')
segments = segments[apply(segments[, 5:ncol(segments)], 1, function(x) all(x == 1)), ]
##################### Add CNA calls to get real diploid mutations
# Define diploid segments
# cnMajor = 1
# cnminor = 1
# across all samples,
segments = read.csv('data/Set.06.penalty0.95.baf.gt.txt',
stringsAsFactors = FALSE, header = TRUE, sep = '\t')
head(segments)
segments = segments[, -3]
head(segments)
colnames(segments)[1:4] = c('chr', 'from', 'to')
##################### Add CNA calls to get real diploid mutations
# Define diploid segments
# cnMajor = 1
# cnminor = 1
# across all samples,
segments = read.csv('data/Set.06.penalty0.95.baf.gt.txt',
stringsAsFactors = FALSE, header = TRUE, sep = '\t')
head(segments)
##################### Add CNA calls to get real diploid mutations
# Define diploid segments
# cnMajor = 1
# cnminor = 1
# across all samples,
segments = read.csv('data/Set.06.penalty0.95.baf.gt.txt',
stringsAsFactors = FALSE, header = TRUE, sep = '\t')
head(segments)
segments$chr = paste0('chr', segments$chr)
segments = segments[, -3]
colnames(segments)[1:3] = c('chr', 'from', 'to')
head(segments)
paste0(samples, '_Major')
CN_samples = paste0(samples, c('_Major', '_Minor'))
CN_samples
CN_samples = c(
paste0(samples, '_Major'),
paste0(samples, '_Minor')
)
CN_samples
CN_samples = c(minor =
paste0(samples, '_Major'),
paste0(samples, '_Minor')
)
CN_samples
CN_samples = c(minor =
c(paste0(samples, '_Major')),
paste0(samples, '_Minor')
)
CN_samples
CN_samples = list(
minor = paste0(samples, '_Major'),
major = paste0(samples, '_Minor')
)
CN_samples
##################### Prepare mutation data, filter normal and SNVs
muts = read.csv('data/Set.06.WGS.snv.somatic.annoVar.comp.txt',
stringsAsFactors = FALSE, header = TRUE, sep = '\t')
head(muts)
setwd("~/Documents/GitHub/test.dbpmm/Multi-region Tests/MSeq2.0")
##################### Add CNA calls to get real diploid mutations
# Define diploid segments
# cnMajor = 1
# cnminor = 1
# across all samples,
segments = read.csv('data/Set.06.penalty0.95.baf.gt.txt',
stringsAsFactors = FALSE, header = TRUE, sep = '\t')
head(segments)
segments = segments[, -3]
colnames(segments)[1:3] = c('chr', 'from', 'to')
segments = segments[apply(segments[, 5:ncol(segments)], 1, function(x) all(x == 1)), ]
head(segments)
setwd("~/Documents/GitHub/test.dbpmm/Multi-region Tests/MSeq2.0")
muts = read.csv('data/Set.06.WGS.snv.somatic.annoVar.comp.txt',
stringsAsFactors = FALSE, header = TRUE, sep = '\t')
head(muts)
colnames(muts)[c(8,9)] = c('from', 'to')
colnames(muts) = gsub('.NR', '.DP', colnames(muts))
segments = read.csv('data/Set.06.penalty0.95.baf.gt.txt',
stringsAsFactors = FALSE, header = TRUE, sep = '\t')
head(segments)
head(segments)
segments = segments[, -c(3, 5, 6, 7, 8, 11, 12, 23:30)]
colnames(segments)[1:3] = c('chr', 'from', 'to')
segments$chr = paste0('chr', segments$chr)
head(segments)
segments[, 4:15]
head(segments)
ncol(segments)
# Set06
muts = read.csv('data/Set.06.WGS.snv.somatic.annoVar.comp.txt',
stringsAsFactors = FALSE, header = TRUE, sep = '\t')
head(muts)
colnames(muts)[c(8,9)] = c('from', 'to')
colnames(muts) = gsub('.NR', '.DP', colnames(muts))
segments = read.csv('data/Set.06.penalty0.95.baf.gt.txt',
stringsAsFactors = FALSE, header = TRUE, sep = '\t')
head(segments)
segments = segments[, -c(3, 5, 6, 7, 8, 11, 12, 23:30)]
colnames(segments)[1:3] = c('chr', 'from', 'to')
segments$chr = paste0('chr', segments$chr)
colnames(segments) = gsub('_Minor', '.minor', colnames(segments))
colnames(segments) = gsub('_Major', '.Major', colnames(segments))
input = list(
muts = muts,
segments = segments,
samples = paste0('Set6_', c(42, 44, 45, 46, 47, 48))
)
save("data/Set06.RData")
save(input, file = "data/Set06.RData")
